/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  // General labels

  withLabel: low_memory {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withLabel: mid_memory {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  // Process-specific resource requirements
  $1A_prepare_genome_samtools {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $srst2 {
    env { SRST2_SAMTOOLS = /samtools-0.1.18/}
  }
  $1B_prepare_genome_picard {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $1C_prepare_genome_bwa {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $2A_read_mapping {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $2B_mark_duplicates {
    cpus = { check_max( 20 * task.attempt, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $3A_call_variants {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $3B_calc_coverage {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $3C_filter_variants {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $3D_split_vcf_indel_snps {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $4A_bgzip_vcf {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $4B_merge_vcf_files {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $4C_convert_to_phylip_format {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $4D_run_RAxML {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
}
  
  params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 40
  max_time = 240.h
}

