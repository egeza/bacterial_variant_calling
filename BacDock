FROM quay.io/cybozu/ubuntu:20.04

RUN apt-get update --fix-missing -qq && apt-get install -y -q \
    aufs-tools \
    automake \
    build-essential \
    cmake \
    curl \
    g++ \
    openjdk-8-jre \
    openjdk-8-jdk \
    locales \
    libncurses5-dev  \
    libncursesw5-dev \
    libcurl4-openssl-dev \
    libbz2-dev \
    libx11-dev \
    pkg-config \
    zlib1g-dev \
    bzip2 \
    r-base \
    default-jre \
    git-core \
    bc \
    unzip \
    wget \
    rename \
    xutils-dev \
    python3 \
    python3-pip \
    bowtie2 \
    && apt-get clean \
    && apt-get purge

RUN apt-get update --fix-missing -qq && apt-get install -y -q \
   software-properties-common
   
RUN add-apt-repository ppa:deadsnakes/ppa

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

RUN python --version

RUN python -m pip install --upgrade pip
RUN python -m pip install numpy
RUN python -m pip install scipy
RUN python -m pip install biopython
RUN python -m pip install git+https://github.com/katholt/srst2
RUN python -m pip install RSeQC
RUN python -m pip install multiqc
RUN python -m pip install venn
RUN python -m pip install pandas
# Biopython is pre-requisite
RUN python -m pip install bioscripts.convert

# install Picard Tools
RUN curl -fksSL https://github.com/broadinstitute/picard/releases/download/2.9.0/picard.jar > /usr/local/bin/picard.jar && \
    chmod +x /usr/local/bin/picard.jar

# install VCFtools
RUN curl -fksSL https://github.com/vcftools/vcftools/releases/download/v0.1.14/vcftools-0.1.14.tar.gz | tar xz && \
    cd vcftools-0.1.14 && \
    ./configure; make; make install

# Install RAxML
RUN git clone https://github.com/stamatak/standard-RAxML.git && cd standard-RAxML* && \
    make -f Makefile.AVX.gcc && \
    rm *.o && \
    make -f Makefile.AVX.PTHREADS.gcc

# Install R packages for ggplot2
RUN R -e 'install.packages( c("reshape2","optparse", "BiocManager"), repos="http://cloud.r-project.org/");' && \
    apt-get update && apt-get install r-cran-ggplot2 -y -q
RUN R -e 'BiocManager::install("dupRadar");'

################################################################################################
# Install Jellyfish
RUN cd /opt && \
    wget https://github.com/gmarcais/Jellyfish/releases/download/v2.2.6/jellyfish-2.2.6.tar.gz && \
    tar -xvf jellyfish-2.2.6.tar.gz && \
    cd jellyfish-2.2.6 && \
    ./configure && \
    make -j 4 && \
    ln -s /opt/jellyfish-2.2.6/bin/jellyfish /usr/bin && \
    cd / && \
    rm /opt/jellyfish-2.2.6.tar.gz

# Install kSNP3 and dependencies
ENV DST=/tmp
ENV URL=https://downloads.sourceforge.net/project/ksnp/

RUN cd /opt && \
    apt-get install -y tcsh && \
    rm -rf /var/lib/apt/lists/* && \
    cd /opt && \
    wget $URL/kSNP3.1_Linux_package.zip -O $DST/kSNP3.1_Linux_package.zip && \
    unzip $DST/kSNP3.1_Linux_package.zip && \
    rm $DST/kSNP3.1_Linux_package.zip && \
    cp kSNP3.1_Linux_package/kSNP3/kSNP3 /usr/local && \
    cd /

# Install CoverageSampler
RUN cd /opt && \
    git clone https://github.com/cdeanj/coverage_sampler.git && \
    cd coverage_sampler && \
    make && \
    ln -s /opt/coverage_sampler/csa /usr/bin && \
    cd /

# CD-HIT
RUN git clone https://github.com/weizhongli/cdhit.git && \
    cd cdhit &&\
    make MAX_SEQ=10000000 && \
    cd

# FastQC
ENV DST=/tmp
ENV URL=https://github.com/agordon/libgtextutils/releases/download/0.7/

RUN wget $URL/libgtextutils-0.7.tar.gz -O $DST/libgtextutils-0.7.tar.gz && \
    tar -xvzf $DST/libgtextutils-0.7.tar.gz -C $DST && \
    rm $DST/libgtextutils-0.7.tar.gz && \
    cd $DST/libgtextutils-0.7 && \
    sed -i '47s/input_stream/static_cast<bool>(input_stream)/' src/gtextutils/text_line_reader.cpp && \
    ./configure && \
    make && \
    make install && \
    cd / && \
    rm -rf $DST/libgtextutils-0.7

WORKDIR /

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion

# Install miniconda
RUN mkdir -p ~/miniconda3
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh && \
    /bin/bash ~/miniconda3/miniconda.sh -b -u -p /opt/conda && 
    rm -rf ~/miniconda3/miniconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

#Install mamba so that we can install conda packages with mamba
RUN conda install mamba -n base -c conda-forge

#Install conda packages using mamba
RUN mamba install -c hcc resistomeanalyzer
RUN mamba install -c bioconda trimmomatic
RUN mamba install -c bioconda fastqc
RUN mamba install -c bioconda picard=2.18.27
RUN mamba install -c conda-forge gsl
RUN mamba install -c bioconda snpeff

#To bypass the problem of "Encountered problems while solving:-nothing provides ..." use -c conda-forge -c bioconda
RUN mamba install -c conda-forge -c bioconda trim-galore
#install after trim-galore to avoid dependency problems
RUN mamba install -c bioconda cutadapt
RUN mamba install -c bioconda fastx_toolkit
RUN mamba install -c bioconda gffread=0.9.12
# scipy is required by deeptools
RUN mamba install -c conda-forge scipy
RUN mamba install -c bioconda deeptools=3.2.0
RUN mamba install -c bioconda sra-tools
RUN mamba install -c bioconda bioconductor-dupradar
RUN mamba install -c bioconda samtools
Run mamba install -c bioconda tbb=2020.2

RUN mamba install -c bioconda star
RUN mamba install -c bioconda bwa
RUN mamba install -c bioconda bowtie2
RUN mamba install -c bioconda csvtk=0.17.0

# R related nonsense
RUN mamba install -c bioconda bioconductor-deseq2
RUN mamba install -c conda-forge r-data.table
RUN mamba install -c conda-forge r-gplots
RUN mamba install -c conda-forge r-markdown

# Alignment
RUN mamba install -c bioconda clustalo
RUN mamba install -c bioconda muscle
RUN mamba install -c bioconda mafft

# Phylogenetics
RUN mamba install -c bioconda freebayes
RUN mamba install -c bioconda beast
RUN mamba install -c conda-forge -c bioconda phyml

# Clustering
#RUN curl -O -L https://sourceforge.net/projects/samtools/files/samtools/$

# Visualisation
RUN mamba install -c bioconda circos
# install tini
RUN mamba install -c conda-forge tini
#Figtree requires xorg-libxtst 
RUN mamba install -c conda-forge xorg-libxtst
# Install Figtree
RUN mamba install -c bioconda figtree

# Install vcf2fasta
RUN git clone https://github.com/egeza/vcf2fasta.git && \
    cd vcf2fasta && \
    chmod a+x process_samples.py && \
    chmod a+x vcf2fasta.py && \
    ln -s /vcf2fasta/vcf2fasta.py /usr/local/bin/vcf2fasta.py
RUN ln -s /vcf2fasta/process_samples.py /usr/local/bin/process_samples.py

# Build this image
## docker build --network=host -t bacterial_variant_calling -f BacDock .

# To build sing image
## docker run -v /var/run/docker.sock:/var/run/docker.sock -v /vol1/ephie:/output --privileged -t --rm singularityware/docker2singularity -m "/shared_fs /custom_mountpoint2" bacterial_variant_calling:latest

# To SCP
# scp /vol1/ephie/<image> ephie@transfer.ilifu.ac.za:/cbio/users/ephie/images/

